// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PastExamsHub.Authority.Infrastructure.Persistence;

namespace PastExamsHub.Authority.Infrastructure.Persistence.Migrations.AuthorityDb
{
    [DbContext(typeof(AuthorityDbContext))]
    [Migration("20240217203915_SeedUsers")]
    partial class SeedUsers
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.12")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", "Identity");

                    b.HasData(
                        new
                        {
                            Id = "Admin",
                            ConcurrencyStamp = "9832004f-f63a-4712-998e-92f42b856685",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "Student",
                            ConcurrencyStamp = "1f843d13-72ad-410c-aa21-fbac7982cb8d",
                            Name = "Student",
                            NormalizedName = "STUDENT"
                        },
                        new
                        {
                            Id = "Teacher",
                            ConcurrencyStamp = "cb373121-ae1d-4693-a72f-6eac390ea985",
                            Name = "Teacher",
                            NormalizedName = "TEACHER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", "Identity");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", "Identity");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClaimType = "name",
                            ClaimValue = "administrator@localhost",
                            UserId = "admin"
                        },
                        new
                        {
                            Id = 2,
                            ClaimType = "email",
                            ClaimValue = "administrator@localhost",
                            UserId = "admin"
                        },
                        new
                        {
                            Id = 3,
                            ClaimType = "email_verified",
                            ClaimValue = "True",
                            UserId = "admin"
                        },
                        new
                        {
                            Id = 4,
                            ClaimType = "name",
                            ClaimValue = "profesor@localhost",
                            UserId = "profesor"
                        },
                        new
                        {
                            Id = 5,
                            ClaimType = "email",
                            ClaimValue = "profesor@localhost",
                            UserId = "profesor"
                        },
                        new
                        {
                            Id = 6,
                            ClaimType = "email_verified",
                            ClaimValue = "True",
                            UserId = "profesor"
                        },
                        new
                        {
                            Id = 7,
                            ClaimType = "name",
                            ClaimValue = "profesorDragan@localhost",
                            UserId = "profesorDragan"
                        },
                        new
                        {
                            Id = 8,
                            ClaimType = "email",
                            ClaimValue = "profesorDragan@localhost",
                            UserId = "profesorDragan"
                        },
                        new
                        {
                            Id = 9,
                            ClaimType = "email_verified",
                            ClaimValue = "True",
                            UserId = "profesorDragan"
                        },
                        new
                        {
                            Id = 10,
                            ClaimType = "name",
                            ClaimValue = "profesorAleksandar@localhost",
                            UserId = "pprofesorAleksandar"
                        },
                        new
                        {
                            Id = 11,
                            ClaimType = "email",
                            ClaimValue = "profesorAleksandar@localhost",
                            UserId = "pprofesorAleksandar"
                        },
                        new
                        {
                            Id = 12,
                            ClaimType = "email_verified",
                            ClaimValue = "True",
                            UserId = "pprofesorAleksandar"
                        },
                        new
                        {
                            Id = 13,
                            ClaimType = "name",
                            ClaimValue = "profesorEmina@localhost",
                            UserId = "profesorEmina"
                        },
                        new
                        {
                            Id = 14,
                            ClaimType = "email",
                            ClaimValue = "profesorEmina@localhost",
                            UserId = "profesorEmina"
                        },
                        new
                        {
                            Id = 15,
                            ClaimType = "email_verified",
                            ClaimValue = "True",
                            UserId = "profesorEmina"
                        },
                        new
                        {
                            Id = 16,
                            ClaimType = "name",
                            ClaimValue = "profesorVladimir@localhost",
                            UserId = "profesorVladimir"
                        },
                        new
                        {
                            Id = 17,
                            ClaimType = "email",
                            ClaimValue = "profesorVladimir@localhost",
                            UserId = "profesorVladimir"
                        },
                        new
                        {
                            Id = 18,
                            ClaimType = "email_verified",
                            ClaimValue = "True",
                            UserId = "profesorVladimir"
                        },
                        new
                        {
                            Id = 19,
                            ClaimType = "name",
                            ClaimValue = "profesorIvan@localhost",
                            UserId = "profesorIvan"
                        },
                        new
                        {
                            Id = 20,
                            ClaimType = "email",
                            ClaimValue = "profesorIvan@localhost",
                            UserId = "profesorIvan"
                        },
                        new
                        {
                            Id = 21,
                            ClaimType = "email_verified",
                            ClaimValue = "True",
                            UserId = "profesorIvan"
                        },
                        new
                        {
                            Id = 22,
                            ClaimType = "name",
                            ClaimValue = "profesorMarija@localhost",
                            UserId = "profesorMarija"
                        },
                        new
                        {
                            Id = 23,
                            ClaimType = "email",
                            ClaimValue = "profesorMarija@localhost",
                            UserId = "profesorMarija"
                        },
                        new
                        {
                            Id = 24,
                            ClaimType = "email_verified",
                            ClaimValue = "True",
                            UserId = "profesorMarija"
                        },
                        new
                        {
                            Id = 25,
                            ClaimType = "name",
                            ClaimValue = "profeosrIgor@localhost",
                            UserId = "profesorIgor"
                        },
                        new
                        {
                            Id = 26,
                            ClaimType = "email",
                            ClaimValue = "profeosrIgor@localhost",
                            UserId = "profesorIgor"
                        },
                        new
                        {
                            Id = 27,
                            ClaimType = "email_verified",
                            ClaimValue = "True",
                            UserId = "profesorIgor"
                        },
                        new
                        {
                            Id = 28,
                            ClaimType = "name",
                            ClaimValue = "profesorNikola@localhost",
                            UserId = "profesorNikola"
                        },
                        new
                        {
                            Id = 29,
                            ClaimType = "email",
                            ClaimValue = "profesorNikola@localhost",
                            UserId = "profesorNikola"
                        },
                        new
                        {
                            Id = 30,
                            ClaimType = "email_verified",
                            ClaimValue = "True",
                            UserId = "profesorNikola"
                        },
                        new
                        {
                            Id = 31,
                            ClaimType = "name",
                            ClaimValue = "profeosrNatalija@localhost",
                            UserId = "profesorNatalija"
                        },
                        new
                        {
                            Id = 32,
                            ClaimType = "email",
                            ClaimValue = "profeosrNatalija@localhost",
                            UserId = "profesorNatalija"
                        },
                        new
                        {
                            Id = 33,
                            ClaimType = "email_verified",
                            ClaimValue = "True",
                            UserId = "profesorNatalija"
                        },
                        new
                        {
                            Id = 34,
                            ClaimType = "name",
                            ClaimValue = "profesorAleksandra@localhost",
                            UserId = "profesorAleksandra"
                        },
                        new
                        {
                            Id = 35,
                            ClaimType = "email",
                            ClaimValue = "profesorAleksandra@localhost",
                            UserId = "profesorAleksandra"
                        },
                        new
                        {
                            Id = 36,
                            ClaimType = "email_verified",
                            ClaimValue = "True",
                            UserId = "profesorAleksandra"
                        },
                        new
                        {
                            Id = 37,
                            ClaimType = "name",
                            ClaimValue = "studentUros@localhost",
                            UserId = "studentUros"
                        },
                        new
                        {
                            Id = 38,
                            ClaimType = "email",
                            ClaimValue = "studentUros@localhost",
                            UserId = "studentUros"
                        },
                        new
                        {
                            Id = 39,
                            ClaimType = "email_verified",
                            ClaimValue = "True",
                            UserId = "studentUros"
                        },
                        new
                        {
                            Id = 40,
                            ClaimType = "name",
                            ClaimValue = "studentPetar@localhost",
                            UserId = "studentPetar"
                        },
                        new
                        {
                            Id = 41,
                            ClaimType = "email",
                            ClaimValue = "studentPetar@localhost",
                            UserId = "studentPetar"
                        },
                        new
                        {
                            Id = 42,
                            ClaimType = "email_verified",
                            ClaimValue = "True",
                            UserId = "studentPetar"
                        },
                        new
                        {
                            Id = 43,
                            ClaimType = "name",
                            ClaimValue = "studentVladimir@localhost",
                            UserId = "studentVladimir"
                        },
                        new
                        {
                            Id = 44,
                            ClaimType = "email",
                            ClaimValue = "studentVladimir@localhost",
                            UserId = "studentVladimir"
                        },
                        new
                        {
                            Id = 45,
                            ClaimType = "email_verified",
                            ClaimValue = "True",
                            UserId = "studentVladimir"
                        },
                        new
                        {
                            Id = 46,
                            ClaimType = "name",
                            ClaimValue = "studentAndrija@localhost",
                            UserId = "studentAndrija"
                        },
                        new
                        {
                            Id = 47,
                            ClaimType = "email",
                            ClaimValue = "studentAndrija@localhost",
                            UserId = "studentAndrija"
                        },
                        new
                        {
                            Id = 48,
                            ClaimType = "email_verified",
                            ClaimValue = "True",
                            UserId = "studentAndrija"
                        },
                        new
                        {
                            Id = 49,
                            ClaimType = "name",
                            ClaimValue = "studentSara@localhost",
                            UserId = "studentSara"
                        },
                        new
                        {
                            Id = 50,
                            ClaimType = "email",
                            ClaimValue = "studentSara@localhost",
                            UserId = "studentSara"
                        },
                        new
                        {
                            Id = 51,
                            ClaimType = "email_verified",
                            ClaimValue = "True",
                            UserId = "studentSara"
                        },
                        new
                        {
                            Id = 52,
                            ClaimType = "name",
                            ClaimValue = "studentMilan@localhost",
                            UserId = "studentMilan"
                        },
                        new
                        {
                            Id = 53,
                            ClaimType = "email",
                            ClaimValue = "studentMilan@localhost",
                            UserId = "studentMilan"
                        },
                        new
                        {
                            Id = 54,
                            ClaimType = "email_verified",
                            ClaimValue = "True",
                            UserId = "studentMilan"
                        },
                        new
                        {
                            Id = 55,
                            ClaimType = "name",
                            ClaimValue = "studentDanilo@localhost",
                            UserId = "studentDanilo"
                        },
                        new
                        {
                            Id = 56,
                            ClaimType = "email",
                            ClaimValue = "studentDanilo@localhost",
                            UserId = "studentDanilo"
                        },
                        new
                        {
                            Id = 57,
                            ClaimType = "email_verified",
                            ClaimValue = "True",
                            UserId = "studentDanilo"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", "Identity");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", "Identity");

                    b.HasData(
                        new
                        {
                            UserId = "admin",
                            RoleId = "Admin"
                        },
                        new
                        {
                            UserId = "profesor",
                            RoleId = "Teacher"
                        },
                        new
                        {
                            UserId = "profesorDragan",
                            RoleId = "Teacher"
                        },
                        new
                        {
                            UserId = "pprofesorAleksandar",
                            RoleId = "Teacher"
                        },
                        new
                        {
                            UserId = "profesorEmina",
                            RoleId = "Teacher"
                        },
                        new
                        {
                            UserId = "profesorVladimir",
                            RoleId = "Teacher"
                        },
                        new
                        {
                            UserId = "profesorIvan",
                            RoleId = "Teacher"
                        },
                        new
                        {
                            UserId = "profesorMarija",
                            RoleId = "Teacher"
                        },
                        new
                        {
                            UserId = "profesorIgor",
                            RoleId = "Teacher"
                        },
                        new
                        {
                            UserId = "profesorNikola",
                            RoleId = "Teacher"
                        },
                        new
                        {
                            UserId = "profesorNatalija",
                            RoleId = "Teacher"
                        },
                        new
                        {
                            UserId = "profesorAleksandra",
                            RoleId = "Teacher"
                        },
                        new
                        {
                            UserId = "studentUros",
                            RoleId = "Student"
                        },
                        new
                        {
                            UserId = "studentPetar",
                            RoleId = "Student"
                        },
                        new
                        {
                            UserId = "studentVladimir",
                            RoleId = "Student"
                        },
                        new
                        {
                            UserId = "studentAndrija",
                            RoleId = "Student"
                        },
                        new
                        {
                            UserId = "studentSara",
                            RoleId = "Student"
                        },
                        new
                        {
                            UserId = "studentMilan",
                            RoleId = "Student"
                        },
                        new
                        {
                            UserId = "studentDanilo",
                            RoleId = "Student"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", "Identity");
                });

            modelBuilder.Entity("PastExamsHub.Authority.Infrastructure.Identity.IdentityApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LastName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", "Identity");

                    b.HasData(
                        new
                        {
                            Id = "admin",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "91a15751-24db-433d-91dd-d393078c85e9",
                            Email = "administrator@localhost",
                            EmailConfirmed = true,
                            FirstName = "Administrator",
                            LastName = "System",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMINISTRATOR@LOCALHOST",
                            NormalizedUserName = "ADMINISTRATOR@LOCALHOST",
                            PasswordHash = "AQAAAAEAACcQAAAAELtE7/Do5myDVwGqhZAxUjV4HrIc+GR9LdtEDk820oUAe1sG3Eb2uSz0YCdoxyEE+A==",
                            PhoneNumber = "0",
                            PhoneNumberConfirmed = false,
                            Role = 1,
                            SecurityStamp = "f0915c2e-f9cc-4ccb-b42e-5046ee4eb47b",
                            TwoFactorEnabled = false,
                            UserName = "administrator@localhost"
                        },
                        new
                        {
                            Id = "profesor",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "8382d19c-5690-4dc3-ae53-2dcf9f0082ac",
                            Email = "profesor@localhost",
                            EmailConfirmed = true,
                            FirstName = "Profesor",
                            LastName = "Elfakovic",
                            LockoutEnabled = false,
                            NormalizedEmail = "PROFESOR@LOCALHOST",
                            NormalizedUserName = "PROFESOR@LOCALHOST",
                            PasswordHash = "AQAAAAEAACcQAAAAEJ4PzyHPQoNH9gPAnu/fNSkfZ2u36O6Cuz+lvmYut7+i+vMEoufhPoOn55+W9DDXEg==",
                            PhoneNumber = "0",
                            PhoneNumberConfirmed = false,
                            Role = 3,
                            SecurityStamp = "3000c9f1-186f-4bf6-adb3-510ccf71b507",
                            TwoFactorEnabled = false,
                            UserName = "profesor@localhost"
                        },
                        new
                        {
                            Id = "profesorDragan",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9cf2094e-d6e3-4363-9461-51de180d2667",
                            Email = "profesorDragan@localhost",
                            EmailConfirmed = true,
                            FirstName = "Dragan",
                            LastName = "Stojanovic",
                            LockoutEnabled = false,
                            NormalizedEmail = "PROFESORDRAGAN@LOCALHOST",
                            NormalizedUserName = "PROFESORDRAGAN@LOCALHOST",
                            PasswordHash = "AQAAAAEAACcQAAAAEPdyFlIb56v6X3qgWsog1uanqS7gtE4EspSM/DP7GYrCGYFFpvHH5i2QcjkAdH9fJA==",
                            PhoneNumber = "0",
                            PhoneNumberConfirmed = false,
                            Role = 3,
                            SecurityStamp = "98a3009d-aa14-4bf0-8234-2cca8f6ba931",
                            TwoFactorEnabled = false,
                            UserName = "profesorDragan@localhost"
                        },
                        new
                        {
                            Id = "pprofesorAleksandar",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2efecea4-6538-4173-8669-04b770d0bd35",
                            Email = "profesorAleksandar@localhost",
                            EmailConfirmed = true,
                            FirstName = "Aleksandar",
                            LastName = "Stanimirovic",
                            LockoutEnabled = false,
                            NormalizedEmail = "PROFESORALEKSANDAR@LOCALHOST",
                            NormalizedUserName = "PROFESORALEKSANDAR@LOCALHOST",
                            PasswordHash = "AQAAAAEAACcQAAAAELSyTewp+oml5VGiEpeesr+4beTaZQ6XYSqLo7gLCnlP9EpSurpYdJEmnfHNknse9w==",
                            PhoneNumber = "0",
                            PhoneNumberConfirmed = false,
                            Role = 3,
                            SecurityStamp = "35e8a083-1726-4084-b654-4677db42220c",
                            TwoFactorEnabled = false,
                            UserName = "profesorAleksandar@localhost"
                        },
                        new
                        {
                            Id = "profesorEmina",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0b4b2839-4b9e-4d17-bc8f-31d2437a13f0",
                            Email = "profesorEmina@localhost",
                            EmailConfirmed = true,
                            FirstName = "Emina",
                            LastName = "Milovanovic",
                            LockoutEnabled = false,
                            NormalizedEmail = "PROFESOREMINA@LOCALHOST",
                            NormalizedUserName = "PROFESOREMINA@LOCALHOST",
                            PasswordHash = "AQAAAAEAACcQAAAAECEVrUssMJkXplHTQdgwehUobuEkaC3l6hHvbRhj4jUgksUgd1t9WIKD+C6MsSqevg==",
                            PhoneNumber = "0",
                            PhoneNumberConfirmed = false,
                            Role = 3,
                            SecurityStamp = "23ed7137-e515-4d52-b6f6-e81a5a962f8c",
                            TwoFactorEnabled = false,
                            UserName = "profesorEmina@localhost"
                        },
                        new
                        {
                            Id = "profesorVladimir",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b988c6a9-075f-4628-bd3c-c4d9f4596c31",
                            Email = "profesorVladimir@localhost",
                            EmailConfirmed = true,
                            FirstName = "Vladimir",
                            LastName = "Simic",
                            LockoutEnabled = false,
                            NormalizedEmail = "PROFESORVLADIMIR@LOCALHOST",
                            NormalizedUserName = "PROFESORVLADIMIR@LOCALHOST",
                            PasswordHash = "AQAAAAEAACcQAAAAENBdCiq1DTRNK0n6215+SRivwh+zqujvYf49yy8V9zZEBCIfKbTB88WvZT1WhhVA2Q==",
                            PhoneNumber = "0",
                            PhoneNumberConfirmed = false,
                            Role = 3,
                            SecurityStamp = "ab0c17f1-f2cb-4089-a025-a7b21f071418",
                            TwoFactorEnabled = false,
                            UserName = "profesorVladimir@localhost"
                        },
                        new
                        {
                            Id = "profesorIvan",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "20d49f33-25d0-4231-8dbc-6b1c03eab360",
                            Email = "profesorIvan@localhost",
                            EmailConfirmed = true,
                            FirstName = "Ivan",
                            LastName = "Petkovic",
                            LockoutEnabled = false,
                            NormalizedEmail = "PROFESORIVAN@LOCALHOST",
                            NormalizedUserName = "PROFESORIVAN@LOCALHOST",
                            PasswordHash = "AQAAAAEAACcQAAAAEHE5z7CGjb6MyHK/hurOQK7idDUhIXuN2PFRLxYrwV2R08vIbFC1zDuAZpwTS/lvMw==",
                            PhoneNumber = "0",
                            PhoneNumberConfirmed = false,
                            Role = 3,
                            SecurityStamp = "f87a1c7e-fa49-4a3a-80d6-1f248ba13294",
                            TwoFactorEnabled = false,
                            UserName = "profesorIvan@localhost"
                        },
                        new
                        {
                            Id = "profesorMarija",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a03d5b96-7ea1-4a7e-840b-a6e51cf1ca0b",
                            Email = "profesorMarija@localhost",
                            EmailConfirmed = true,
                            FirstName = "Marija",
                            LastName = "Veljanovski",
                            LockoutEnabled = false,
                            NormalizedEmail = "PROFESORMARIJA@LOCALHOST",
                            NormalizedUserName = "PROFESORMARIJA@LOCALHOST",
                            PasswordHash = "AQAAAAEAACcQAAAAEMixaWkL/7ZoDYbZZZtwNqUhbO6sSmlHx+nB0IfyyNL5Mhe2/PQmIxtTt8DjL8LISw==",
                            PhoneNumber = "0",
                            PhoneNumberConfirmed = false,
                            Role = 3,
                            SecurityStamp = "51b042c5-c124-425b-86c4-a576d3e0eada",
                            TwoFactorEnabled = false,
                            UserName = "profesorMarija@localhost"
                        },
                        new
                        {
                            Id = "profesorIgor",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a6053eed-02c4-499a-b3e3-19ce06c29ed6",
                            Email = "profeosrIgor@localhost",
                            EmailConfirmed = true,
                            FirstName = "Igor",
                            LastName = "Antolovic",
                            LockoutEnabled = false,
                            NormalizedEmail = "PROFEOSRIGOR@LOCALHOST",
                            NormalizedUserName = "PROFEOSRIGOR@LOCALHOST",
                            PasswordHash = "AQAAAAEAACcQAAAAEFwHukT4riJn823wRbNXcSSKP8FgD6JD3l8Zg6TT/QkVh6YA//BijOLWY0f1EPF3rA==",
                            PhoneNumber = "0",
                            PhoneNumberConfirmed = false,
                            Role = 3,
                            SecurityStamp = "1ea0b707-85c5-417b-8c1d-69e1a194edb8",
                            TwoFactorEnabled = false,
                            UserName = "profeosrIgor@localhost"
                        },
                        new
                        {
                            Id = "profesorNikola",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "fe8aaae8-f574-42b8-b2ad-9b68ec2305ff",
                            Email = "profesorNikola@localhost",
                            EmailConfirmed = true,
                            FirstName = "Nikola",
                            LastName = "Davidovic",
                            LockoutEnabled = false,
                            NormalizedEmail = "PROFESORNIKOLA@LOCALHOST",
                            NormalizedUserName = "PROFESORNIKOLA@LOCALHOST",
                            PasswordHash = "AQAAAAEAACcQAAAAEKpggfgd/9vUrZS23C/awP49WD5+n+ZE2phNh/LBMfaHSRZofe/MtWeflI+mYR/5vA==",
                            PhoneNumber = "0",
                            PhoneNumberConfirmed = false,
                            Role = 3,
                            SecurityStamp = "3453ac85-cbf0-4135-b527-5661fd946ded",
                            TwoFactorEnabled = false,
                            UserName = "profesorNikola@localhost"
                        },
                        new
                        {
                            Id = "profesorNatalija",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a979e40c-f1bc-4a7d-a67c-27801521f1fa",
                            Email = "profeosrNatalija@localhost",
                            EmailConfirmed = true,
                            FirstName = "Natalija",
                            LastName = "Stojanovic",
                            LockoutEnabled = false,
                            NormalizedEmail = "PROFEOSRNATALIJA@LOCALHOST",
                            NormalizedUserName = "PROFEOSRNATALIJA@LOCALHOST",
                            PasswordHash = "AQAAAAEAACcQAAAAEEonLYGYpCjADGnF4YrX9Tfqhqk6J+1PI99qc6C+gpPkxCnDoeiwvlTz2c5IHagnYw==",
                            PhoneNumber = "0",
                            PhoneNumberConfirmed = false,
                            Role = 3,
                            SecurityStamp = "7a4375c0-b95a-43c2-90c3-bbc3161f4afc",
                            TwoFactorEnabled = false,
                            UserName = "profeosrNatalija@localhost"
                        },
                        new
                        {
                            Id = "profesorAleksandra",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "629369b9-29bc-4f92-81bd-b0f7e48aa6f0",
                            Email = "profesorAleksandra@localhost",
                            EmailConfirmed = true,
                            FirstName = "Aleksandra",
                            LastName = "Stojnev",
                            LockoutEnabled = false,
                            NormalizedEmail = "PROFESORALEKSANDRA@LOCALHOST",
                            NormalizedUserName = "PROFESORALEKSANDRA@LOCALHOST",
                            PasswordHash = "AQAAAAEAACcQAAAAEM10kIYqY83fl5MLzEziUNHP8g4tVeTSNP85GyjmwgM6qMBg3guQc0rbDX2/P1sdSQ==",
                            PhoneNumber = "0",
                            PhoneNumberConfirmed = false,
                            Role = 3,
                            SecurityStamp = "f9d8bb0b-6d86-4afe-9519-0e4c952394de",
                            TwoFactorEnabled = false,
                            UserName = "profesorAleksandra@localhost"
                        },
                        new
                        {
                            Id = "studentUros",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ba0d8ac6-650a-46f7-b7c0-4c9e34b75931",
                            Email = "studentUros@localhost",
                            EmailConfirmed = true,
                            FirstName = "Uros",
                            LastName = "Markovic",
                            LockoutEnabled = false,
                            NormalizedEmail = "STUDENTUROS@LOCALHOST",
                            NormalizedUserName = "STUDENTUROS@LOCALHOST",
                            PasswordHash = "AQAAAAEAACcQAAAAEALIynom62HIY2X560eHplKqrKW2mE6VcFc2GoE+fUOFrT1hgpp0uV23R7ZLaPXrbQ==",
                            PhoneNumber = "0",
                            PhoneNumberConfirmed = false,
                            Role = 2,
                            SecurityStamp = "81f26eb5-67f5-4db7-a298-84bfcf2e5d1e",
                            TwoFactorEnabled = false,
                            UserName = "studentUros@localhost"
                        },
                        new
                        {
                            Id = "studentPetar",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f1013cec-da34-44f0-bd3e-80f56b634b73",
                            Email = "studentPetar@localhost",
                            EmailConfirmed = true,
                            FirstName = "Petar",
                            LastName = "Maravic",
                            LockoutEnabled = false,
                            NormalizedEmail = "STUDENTPETAR@LOCALHOST",
                            NormalizedUserName = "STUDENTPETAR@LOCALHOST",
                            PasswordHash = "AQAAAAEAACcQAAAAEGQRBZjA6Z5NC7iMbH91YskGmdIPchPEWo6FoK0lUYNEhE6UHF2jURwkTUDxlfovkw==",
                            PhoneNumber = "0",
                            PhoneNumberConfirmed = false,
                            Role = 2,
                            SecurityStamp = "a04542cf-42ce-4dd9-89da-2c5a17f2c38b",
                            TwoFactorEnabled = false,
                            UserName = "studentPetar@localhost"
                        },
                        new
                        {
                            Id = "studentVladimir",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9b41bc91-6bff-4e15-b77b-8197b311623f",
                            Email = "studentVladimir@localhost",
                            EmailConfirmed = true,
                            FirstName = "Vladimir",
                            LastName = "Milosevic",
                            LockoutEnabled = false,
                            NormalizedEmail = "STUDENTVLADIMIR@LOCALHOST",
                            NormalizedUserName = "STUDENTVLADIMIR@LOCALHOST",
                            PasswordHash = "AQAAAAEAACcQAAAAEK6Fb7Unf1qI0HZkjOEng4+mmmN2SVVB/rIyu20NJMGOJiWq0GhNQkZG1l51PjT6BQ==",
                            PhoneNumber = "0",
                            PhoneNumberConfirmed = false,
                            Role = 2,
                            SecurityStamp = "18d40506-9ad1-46b9-9203-04635940aa0d",
                            TwoFactorEnabled = false,
                            UserName = "studentVladimir@localhost"
                        },
                        new
                        {
                            Id = "studentAndrija",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6e3da480-f7e1-40f8-a357-6437a8f9840d",
                            Email = "studentAndrija@localhost",
                            EmailConfirmed = true,
                            FirstName = "Andrija",
                            LastName = "Radosavljevic",
                            LockoutEnabled = false,
                            NormalizedEmail = "STUDENTANDRIJA@LOCALHOST",
                            NormalizedUserName = "STUDENTANDRIJA@LOCALHOST",
                            PasswordHash = "AQAAAAEAACcQAAAAEI9VStB9ahebg+9SCCRBnOUcRuEEHKNKg2Zfb92Q1i44I96SOJu0GRxxF83rvb7bQg==",
                            PhoneNumber = "0",
                            PhoneNumberConfirmed = false,
                            Role = 2,
                            SecurityStamp = "87eb7011-fc37-4c4c-b6d1-934755b1471c",
                            TwoFactorEnabled = false,
                            UserName = "studentAndrija@localhost"
                        },
                        new
                        {
                            Id = "studentSara",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c4471e21-7bdd-4a8b-97c5-1be446efacb5",
                            Email = "studentSara@localhost",
                            EmailConfirmed = true,
                            FirstName = "Sara",
                            LastName = "Stojanovic",
                            LockoutEnabled = false,
                            NormalizedEmail = "STUDENTSARA@LOCALHOST",
                            NormalizedUserName = "STUDENTSARA@LOCALHOST",
                            PasswordHash = "AQAAAAEAACcQAAAAEC6RZc0wpNhyKRQuB+RKr9BiFnA3omJLnqa/nAIU26XOBTLEuYWy9rjb1C9mAz9FUg==",
                            PhoneNumber = "0",
                            PhoneNumberConfirmed = false,
                            Role = 2,
                            SecurityStamp = "694b31a3-e99f-445b-a276-ecbb7593cab3",
                            TwoFactorEnabled = false,
                            UserName = "studentSara@localhost"
                        },
                        new
                        {
                            Id = "studentMilan",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3a5ceb35-dbc0-4fd0-8017-9b0e4256f6c5",
                            Email = "studentMilan@localhost",
                            EmailConfirmed = true,
                            FirstName = "Milan",
                            LastName = "Stojanovic",
                            LockoutEnabled = false,
                            NormalizedEmail = "STUDENTMILAN@LOCALHOST",
                            NormalizedUserName = "STUDENTMILAN@LOCALHOST",
                            PasswordHash = "AQAAAAEAACcQAAAAECEteZtXMhI2+UOwNdXeLai7WOtfn7M/nkOCdNxBHzQMpHlpoZdsyBLZ3rAnFO/r0g==",
                            PhoneNumber = "0",
                            PhoneNumberConfirmed = false,
                            Role = 2,
                            SecurityStamp = "69fd41e8-4e79-4b42-af5d-e36ce4b3ce3e",
                            TwoFactorEnabled = false,
                            UserName = "studentMilan@localhost"
                        },
                        new
                        {
                            Id = "studentDanilo",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4d8a096c-c8b3-4ea2-8984-e9d687205d26",
                            Email = "studentDanilo@localhost",
                            EmailConfirmed = true,
                            FirstName = "Danilo",
                            LastName = "Markovic",
                            LockoutEnabled = false,
                            NormalizedEmail = "STUDENTDANILO@LOCALHOST",
                            NormalizedUserName = "STUDENTDANILO@LOCALHOST",
                            PasswordHash = "AQAAAAEAACcQAAAAEHIN6vLQV+bvbfUpNel5aQ64uKl8IinL8bNMgX5NsMjeNnABYEVt91VX/RFjcBkkuw==",
                            PhoneNumber = "0",
                            PhoneNumberConfirmed = false,
                            Role = 2,
                            SecurityStamp = "947f8e2f-436b-4b18-941c-b934d940ce92",
                            TwoFactorEnabled = false,
                            UserName = "studentDanilo@localhost"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("PastExamsHub.Authority.Infrastructure.Identity.IdentityApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("PastExamsHub.Authority.Infrastructure.Identity.IdentityApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PastExamsHub.Authority.Infrastructure.Identity.IdentityApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("PastExamsHub.Authority.Infrastructure.Identity.IdentityApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
