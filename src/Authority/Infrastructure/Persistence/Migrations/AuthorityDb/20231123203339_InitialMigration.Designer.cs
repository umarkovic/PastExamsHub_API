// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PastExamsHub.Authority.Infrastructure.Persistence;

namespace PastExamsHub.Authority.Infrastructure.Persistence.Migrations.AuthorityDb
{
    [DbContext(typeof(AuthorityDbContext))]
    [Migration("20231123203339_InitialMigration")]
    partial class InitialMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.12")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", "Identity");

                    b.HasData(
                        new
                        {
                            Id = "Admin",
                            ConcurrencyStamp = "c48f58f8-40e8-4a82-ac7a-d8dfdb55aae4",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "Student",
                            ConcurrencyStamp = "9b591809-ccba-437b-9556-475dc3f63e70",
                            Name = "Student",
                            NormalizedName = "STUDENT"
                        },
                        new
                        {
                            Id = "Teacher",
                            ConcurrencyStamp = "804e97b3-2e20-4e4d-8408-de0e51f0e3e4",
                            Name = "Teacher",
                            NormalizedName = "TEACHER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", "Identity");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", "Identity");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClaimType = "name",
                            ClaimValue = "administrator@localhost",
                            UserId = "61e79b02-319f-4832-902c-57674423997b"
                        },
                        new
                        {
                            Id = 2,
                            ClaimType = "email",
                            ClaimValue = "administrator@localhost",
                            UserId = "61e79b02-319f-4832-902c-57674423997b"
                        },
                        new
                        {
                            Id = 3,
                            ClaimType = "email_verified",
                            ClaimValue = "True",
                            UserId = "61e79b02-319f-4832-902c-57674423997b"
                        },
                        new
                        {
                            Id = 4,
                            ClaimType = "name",
                            ClaimValue = "umarkovic864@gmail.com",
                            UserId = "4b1b3e4c-0b63-4429-a9b1-66f2e588d72d"
                        },
                        new
                        {
                            Id = 5,
                            ClaimType = "email",
                            ClaimValue = "umarkovic864@gmail.com",
                            UserId = "4b1b3e4c-0b63-4429-a9b1-66f2e588d72d"
                        },
                        new
                        {
                            Id = 6,
                            ClaimType = "email_verified",
                            ClaimValue = "True",
                            UserId = "4b1b3e4c-0b63-4429-a9b1-66f2e588d72d"
                        },
                        new
                        {
                            Id = 7,
                            ClaimType = "name",
                            ClaimValue = "valenejkovic@gmail.com",
                            UserId = "99f650bd-8041-488f-a9b9-4b62da5d5983"
                        },
                        new
                        {
                            Id = 8,
                            ClaimType = "email",
                            ClaimValue = "valenejkovic@gmail.com",
                            UserId = "99f650bd-8041-488f-a9b9-4b62da5d5983"
                        },
                        new
                        {
                            Id = 9,
                            ClaimType = "email_verified",
                            ClaimValue = "True",
                            UserId = "99f650bd-8041-488f-a9b9-4b62da5d5983"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", "Identity");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", "Identity");

                    b.HasData(
                        new
                        {
                            UserId = "61e79b02-319f-4832-902c-57674423997b",
                            RoleId = "Admin"
                        },
                        new
                        {
                            UserId = "4b1b3e4c-0b63-4429-a9b1-66f2e588d72d",
                            RoleId = "Student"
                        },
                        new
                        {
                            UserId = "99f650bd-8041-488f-a9b9-4b62da5d5983",
                            RoleId = "Teacher"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", "Identity");
                });

            modelBuilder.Entity("PastExamsHub.Authority.Infrastructure.Identity.IdentityApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LastName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", "Identity");

                    b.HasData(
                        new
                        {
                            Id = "61e79b02-319f-4832-902c-57674423997b",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f6033ea5-24d6-48de-8c20-aff998be76eb",
                            Email = "administrator@localhost",
                            EmailConfirmed = true,
                            FirstName = "Administrator",
                            LastName = "System",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMINISTRATOR@LOCALHOST",
                            NormalizedUserName = "ADMINISTRATOR@LOCALHOST",
                            PasswordHash = "AQAAAAEAACcQAAAAEELm4ge9uIyX8vHt3Tmon4JDORii+SgsDw1n/0R2Sq3pTxCu5Mxq58rGicX7E2tFnQ==",
                            PhoneNumber = "0",
                            PhoneNumberConfirmed = false,
                            Role = 1,
                            SecurityStamp = "56b537b1-9e16-4a0b-a090-0c7f4149484b",
                            TwoFactorEnabled = false,
                            UserName = "administrator@localhost"
                        },
                        new
                        {
                            Id = "4b1b3e4c-0b63-4429-a9b1-66f2e588d72d",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7d8f1a06-6d11-452e-9919-4f92ad0547c2",
                            Email = "umarkovic864@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Uros",
                            LastName = "Markovic",
                            LockoutEnabled = false,
                            NormalizedEmail = "UMARKOVIC864@GMAIL.COM",
                            NormalizedUserName = "UMARKOVIC864@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEMD8C4M2eyo3HU05poC78I3Ch+hZzNzh7VdPZdsQ2SJhz1xR060m86dVf1th1OSpfw==",
                            PhoneNumber = "0",
                            PhoneNumberConfirmed = false,
                            Role = 2,
                            SecurityStamp = "c1ed12a3-defb-4406-b9a5-04a97b7345d2",
                            TwoFactorEnabled = false,
                            UserName = "umarkovic864@gmail.com"
                        },
                        new
                        {
                            Id = "99f650bd-8041-488f-a9b9-4b62da5d5983",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5423feab-c18e-4d53-b270-efe83002310b",
                            Email = "valenejkovic@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Valentina",
                            LastName = "Nejkovic",
                            LockoutEnabled = false,
                            NormalizedEmail = "VALENEJKOVIC@GMAIL.COM",
                            NormalizedUserName = "VALENEJKOVIC@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEAW/W0k+kI8gCfkB2OrovZhrvMaX2RhMgoRxDeSPKJFtuYGwUcuI0tq1o/ObBLp0xA==",
                            PhoneNumber = "0",
                            PhoneNumberConfirmed = false,
                            Role = 3,
                            SecurityStamp = "588c4d69-d1f1-4f87-b979-ee3b37ffb526",
                            TwoFactorEnabled = false,
                            UserName = "valenejkovic@gmail.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("PastExamsHub.Authority.Infrastructure.Identity.IdentityApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("PastExamsHub.Authority.Infrastructure.Identity.IdentityApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PastExamsHub.Authority.Infrastructure.Identity.IdentityApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("PastExamsHub.Authority.Infrastructure.Identity.IdentityApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
